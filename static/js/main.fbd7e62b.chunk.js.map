{"version":3,"sources":["Components/UniButton.tsx","Counter.tsx","CounterSettings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UniButton","props","Button","variant","style","color","onClick","callback","title","Counter","Typography","align","fontSize","fontWeight","className","error","classes","marginTop","marginBottom","startvalueDisplay","Inc","Dec","Reset","CounterSettings","Input","whiteSpace","minWidth","marginLeft","type","inputProps","textAlign","width","value","startValue","onChange","e","currentTarget","setError","setStartValue","localStorage","getItem","maxValue","setMaxValue","Box","setToLocalStorage","clearLocalStorage","useStyles","makeStyles","root","height","display","justifyContent","alignItems","backgroundRepeat","backgroundSize","CardItem","background","justifyItems","APP","count","JSON","parse","useState","startValueDisplay","setStartValueDisplay","Container","fixed","maxWidth","Grid","container","spacing","item","md","Card","square","setItem","stringify","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.fbd7e62b.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\n\r\n\r\nexport type ButtonType = {\r\n    title: string\r\n    callback: () => void\r\n}\r\n\r\nexport function UniButton(props: ButtonType) {\r\n\r\n    const callBackAction = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <Button variant={\"outlined\"} style={{color: 'black'}} onClick={callBackAction}>{props.title}</Button>\r\n    )\r\n}","import {Typography} from '@material-ui/core';\r\nimport {ClassNameMap} from '@material-ui/core/styles/withStyles';\r\nimport React from 'react';\r\nimport {SetStateAction} from 'react';\r\nimport {Dispatch} from 'react';\r\nimport {UniButton} from './Components/UniButton';\r\n\r\nexport type CounterPropsType = {\r\n    count: number\r\n    maxValue: number\r\n    Inc: () => void\r\n    Reset: () => void\r\n    Dec: () => void\r\n    startValue: number\r\n    startvalueDisplay: number\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n    error: boolean\r\n    classes: ClassNameMap<\"root\" | \"error\">\r\n}\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n    return (\r\n        <div>\r\n            <Typography align={\"center\"}\r\n                        variant={'overline'}\r\n                        style={{fontSize: '1em', fontWeight: 'bolder'}}>Counter</Typography>\r\n            <div className={props.error ? props.classes.error : ''}\r\n                 style={{marginTop: \"20px\", marginBottom: '30px', fontSize: '20px'}}>{props.error ?\r\n                <span>Oops</span> : props.startvalueDisplay}</div>\r\n            <UniButton callback={props.Inc}\r\n                       title='+1'\r\n            />\r\n            <UniButton callback={props.Dec}\r\n                       title='-1'\r\n            />\r\n            <UniButton callback={props.Reset}\r\n                       title='Reset'\r\n            />\r\n            {/*{props.count === props.maxValue && <div className='string'>{props.maxValue} is a max number here</div>}*/}\r\n        </div>\r\n    )\r\n}","import {Box, Input} from '@material-ui/core';\r\nimport {Typography} from '@material-ui/core';\r\nimport React, {ChangeEvent, Dispatch, SetStateAction} from 'react';\r\nimport {UniButton} from './Components/UniButton';\r\nimport {ClassNameMap} from '@material-ui/core/styles/withStyles';\r\n\r\nexport type CounterSettingsPropsType = {\r\n    count: number\r\n    startValue: number\r\n    maxValue: number\r\n    setToLocalStorage: () => void\r\n    clearLocalStorage: () => void\r\n    setStartValue: Dispatch<SetStateAction<number>>\r\n    setMaxValue: Dispatch<SetStateAction<number>>\r\n    classes: ClassNameMap<\"error\" | \"root\" | \"CardItem\" | \"Input\">\r\n    startValueDisplay: number\r\n    setError: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nexport function CounterSettings(props: CounterSettingsPropsType) {\r\n\r\n\r\n\r\n    const onChangeStartValueValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value >= 0) {\r\n            props.setError(false)\r\n            let startValue = +e.currentTarget.value\r\n            props.setStartValue(startValue)\r\n            localStorage.getItem('startValue')\r\n        } else {\r\n            props.setError(true)\r\n        }\r\n    }\r\n\r\n    const onChangeMaxValueValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value > 0) {\r\n            props.setError(false)\r\n            let maxValue = +e.currentTarget.value\r\n            props.setMaxValue(maxValue)\r\n            localStorage.getItem('maxValue')\r\n        } else {\r\n            props.setError(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Typography variant={'overline'} style={{fontSize: '1em', fontWeight: 'bolder'}}>Settings</Typography>\r\n            <div className={props.classes.Input}><Typography variant={'overline'} style={{\r\n                whiteSpace: 'nowrap',\r\n                minWidth: '90px', marginLeft: '60px'\r\n            }}>Start value</Typography><Input type='number'\r\n                                              inputProps={{style: {textAlign: 'center', width: \"50px\"}}}\r\n                                              value={props.startValue}\r\n                                              onChange={onChangeStartValueValueHandler}/>\r\n            </div>\r\n            <div className={props.classes.Input}><Typography variant={'overline'} style={{\r\n                whiteSpace: 'nowrap',\r\n                minWidth: '90px', marginLeft: '60px'\r\n            }}>Max value</Typography> <Input type='number'\r\n                                             className={props.classes.Input}\r\n                                             inputProps={{style: {textAlign: 'center', width: \"50px\"}}}\r\n                                             value={props.maxValue}\r\n                                             onChange={onChangeMaxValueValueHandler}\r\n            />\r\n            </div>\r\n            <Box marginTop={'10px'}>\r\n                <UniButton callback={props.setToLocalStorage}\r\n                           title={'Set'}/>\r\n                <UniButton callback={props.clearLocalStorage}\r\n                           title={'Clear'}/>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {Grid} from '@material-ui/core';\nimport {Card} from '@material-ui/core';\nimport {makeStyles} from '@material-ui/core';\nimport {Container} from '@material-ui/core';\nimport React, {useState} from 'react';\nimport {Counter} from './Counter';\nimport {CounterSettings} from './CounterSettings';\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover'\n    },\n    error: {\n        color: 'red',\n    },\n    CardItem: {\n        width: '16em',\n        height: '10em',\n        textAlign: 'center',\n        background: \"#E6E6FA\",\n    },\n    Input: {\n        display: 'flex',\n        justifyItems: 'center',\n    }\n});\n\nfunction APP() {\n\n    const classes = useStyles();\n\n    let count = JSON.parse(localStorage.getItem('startValue')!)\n    let [startValue, setStartValue] = useState<number>(JSON.parse(localStorage.getItem('startValue')!))\n    let [maxValue, setMaxValue] = useState<number>(JSON.parse(localStorage.getItem('maxValue')!))\n    let [startValueDisplay, setStartValueDisplay] = useState<number>(count ? count : 0)\n    let [error, setError] = useState<boolean>(false)\n\n    function Inc() {\n        if (startValueDisplay < maxValue) {\n            setError(false)\n            setStartValueDisplay(startValueDisplay + 1)\n        } else {\n            setError(true)\n        }\n    }\n\n    function Dec() {\n        if (startValueDisplay > startValue) {\n            setError(false)\n            setStartValueDisplay(startValueDisplay - 1)\n        } else {\n            setError(true)\n        }\n    }\n\n    function Reset() {\n        setStartValueDisplay(startValue)\n        setError(false)\n    }\n\n    const setToLocalStorage = () => {\n        setError(false)\n        setStartValueDisplay(startValue)\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    }\n    const clearLocalStorage = () => {\n        localStorage.clear()\n        setError(false)\n        setStartValue(0)\n        setMaxValue(0)\n        setStartValueDisplay(0)\n    }\n\n\n    return (\n        <div style={{\n            background: `url(https://wallpapers-hub.art/wallpaper-images/136632.jpg)`,\n            height: '100vh',\n        }}>\n            <Container fixed maxWidth=\"md\" className={classes.root}>\n                <Grid container spacing={4} justifyContent={'center'}>\n                    <Grid item md={4}>\n                        <Card variant=\"outlined\" square className={classes.CardItem}>\n                            <Counter count={count}\n                                     maxValue={maxValue}\n                                     Inc={Inc}\n                                     Reset={Reset}\n                                     Dec={Dec}\n                                     startValue={startValue}\n                                     startvalueDisplay={startValueDisplay}\n                                     setError={setError}\n                                     error={error}\n                                     classes={classes}\n                            />\n                        </Card>\n                    </Grid>\n                    <Grid item md={5}>\n                        <Card variant=\"outlined\" square className={classes.CardItem}>\n                            <CounterSettings count={count}\n                                             startValue={startValue}\n                                             maxValue={maxValue}\n                                             setToLocalStorage={setToLocalStorage}\n                                             clearLocalStorage={clearLocalStorage}\n                                             setStartValue={setStartValue}\n                                             setMaxValue={setMaxValue}\n                                             classes={classes}\n                                             startValueDisplay={startValueDisplay}\n                                             setError={setError}\n                            />\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n        ;\n}\n\nexport default APP;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}